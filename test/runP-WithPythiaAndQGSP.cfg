process PROD  = 
{

   service = MessageLogger
   {
      untracked vstring destinations = {"cout"}

      #vstring categories = { "FwkJob" }

      PSet cout = 
      {
         PSet default  = { int32 limit = 0 }  # kill all messages in the log
	 #PSet FwkJob   = { int32 limit = -1 } # but FwkJob category - those unlimitted
      }

      # uncomment if you want it...
      #
      # untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}      
   }

   service = Timing {}
   
   service = RandomNumberGeneratorService
   {
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 987654321
      }
   }

   # PythiaSource config. has been taken from
   # test example in IOMC/GeneratorInterface/test/mcinput.cfg
   # thanks to Filip Moortgat and Joanna Weng !
   #
   source = PythiaSource 
   { 
      untracked int32 maxEvents = 20
      untracked bool pythiaVerbosity = false

      PSet PythiaParameters = 
      {

         # This is a vector of ParameterSet names to be read, in this order
         # The first two are in the include files below
         # The last one are simply my additional parameters
	 vstring parameterSets = 
	 {
	    "pythiaDefault", 
	    "pythiaMinBias", 
	    "myParameters"
	 }

         # Default (mostly empty - to keep PYTHIA default) card file
         # Name of the set is "pythiaDefault"
         include "IOMC/GeneratorInterface/test/pythiaDefault.cfg"

         # Default cards for minimum bias events (unfiltered)
         # Name of the set is "pythiaMinBias"
         include "IOMC/GeneratorInterface/test/pythiaMinBias.cfg"

         # User cards - name is "myParameters"
         # Pythia's random generator initialization 
	 vstring myParameters = 
	 {
            'MRPY(1)= 123456789 ! Automatic random if -1'
	 }

      }
   }

   # event vertex smearing - applies only once (internal check)
   # Note : all internal generatoes will always do (0,0,0) vertex
   #
   module VtxSmeared = VertexGenerator
   {
      string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
      double MeanX = 0.
      double MeanY = 0.
      double MeanZ = 0.
      double SigmaX = 0.015
      double SigmaY = 0.015
      double SigmaZ = 53.0  // in mm (as in COBRA/OSCAR)
   }


   #Geometry
   #
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
   es_module = TrackerGeometricDetESModule {}
   
   # Magnetic Field
   #
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   # Event, etc. output
   #
   module GEN-SIM = PoolOutputModule { untracked string fileName = "pythia_minbias_detsim.root" }
		
   # Geant4-based CMS Detector simulation
   #
   include "SimG4Core/Application/data/SimG4Object.cfi"

   # now the order of execution
   #   
   path p1 = { VtxSmeared, SimG4Object }
   endpath outpath = { GEN-SIM }
   
}		
